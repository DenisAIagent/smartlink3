const jwt = require('jsonwebtoken');
const User = require('../models/User');
const ErrorResponse = require('../utils/errorResponse');
const asyncHandler = require('./asyncHandler');

// Middleware de protection des routes
exports.protect = asyncHandler(async (req, res, next) => {
  let token;

  // V√©rifier le header Authorization
  if (req.headers.authorization && req.headers.authorization.startsWith('Bearer')) {
    token = req.headers.authorization.split(' ')[1];
  }
  // V√©rifier les cookies
  else if (req.cookies && req.cookies.token) {
    token = req.cookies.token;
  }

  // Mode bypass pour d√©veloppement
  const bypassAuth = process.env.NODE_ENV === 'development' || process.env.VITE_BYPASS_AUTH === 'true';
  
  if (token === 'dev-bypass-token' || bypassAuth) {
    console.log('üîì Auth: Bypass activ√© pour d√©veloppement/production');
    
    try {
      // Cr√©er ou r√©cup√©rer l'utilisateur de d√©veloppement
      let devUser = await User.findOne({ email: 'denis@mdmcmusicads.com' });
      
      if (!devUser) {
        console.log('üë§ Cr√©ation utilisateur de d√©veloppement...');
        devUser = await User.create({
          username: 'denis',
          email: 'denis@mdmcmusicads.com',
          role: 'admin',
          password: 'dev-password-123' // Mot de passe factice
        });
        console.log('üë§ Utilisateur de d√©veloppement cr√©√©:', devUser._id);
      } else {
        console.log('üë§ Utilisateur de d√©veloppement r√©cup√©r√©:', devUser._id);
      }

      console.log('üîç req.user._id d√©fini √†:', devUser._id);
      req.user = devUser;
      return next();
    } catch (error) {
      console.error('‚ùå Erreur cr√©ation utilisateur dev:', error);
      return next(new ErrorResponse('Erreur d\'authentification en mode d√©veloppement', 500));
    }
  }

  // V√©rifier si token existe
  if (!token) {
    return next(new ErrorResponse('Acc√®s non autoris√©, token manquant', 401));
  }

  try {
    // V√©rifier le token
    const decoded = jwt.verify(token, process.env.JWT_SECRET);

    // R√©cup√©rer l'utilisateur
    req.user = await User.findById(decoded.id);

    if (!req.user) {
      return next(new ErrorResponse('Utilisateur non trouv√©', 404));
    }

    next();
  } catch (error) {
    return next(new ErrorResponse('Token invalide', 401));
  }
});

// Middleware d'autorisation par r√¥le
exports.authorize = (...roles) => {
  return (req, res, next) => {
    if (!roles.includes(req.user.role)) {
      return next(new ErrorResponse(`R√¥le ${req.user.role} non autoris√©`, 403));
    }
    next();
  };
};
